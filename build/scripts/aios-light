#!/bin/sh
# ==============================
# aios-light - Interactive Setup
# ==============================

SETUP_URL="https://site-u.pages.dev/build/scripts/setup.sh"
SETUP_PATH="/tmp/setup.sh"

echo "================================"
echo "OpenWrt Interactive Setup"
echo "================================"
echo ""

# ==============================
# 対話形式での入力
# ==============================

echo "--- Basic Settings ---"
read -p "Device hostname (optional): " device_name
read -s -p "Root password (optional): " root_password
echo ""
read -p "LAN IPv4 address [192.168.1.1]: " lan_ip_address
read -p "LAN IPv6 address [auto]: " lan_ipv6_address
read -p "System language [en/ja]: " language
language=${language:-en}
read -p "System timezone [JST-9]: " timezone
timezone=${timezone:-JST-9}
read -p "System zonename [Asia/Tokyo]: " zonename
zonename=${zonename:-Asia/Tokyo}
echo ""

echo "--- SSH Settings ---"
read -p "SSH interface (e.g., lan) (optional): " ssh_interface
read -p "SSH port (optional): " ssh_port
echo ""

echo "--- Network Performance ---"
read -p "Flow offloading [none/software/hardware]: " flow_offloading_type
flow_offloading_type=${flow_offloading_type:-none}
echo ""

echo "--- WiFi Settings ---"
read -p "Configure WiFi? [y/N]: " configure_wifi
if [ "$configure_wifi" = "y" ] || [ "$configure_wifi" = "Y" ]; then
    read -p "WiFi SSID: " wlan_ssid
    while true; do
        read -s -p "WiFi password (>=8 chars): " wlan_password
        echo ""
        [ ${#wlan_password} -ge 8 ] && break
        echo "Password must be at least 8 characters."
    done
    read -p "WiFi country code [00]: " country
    country=${country:-00}
    read -p "Enable roaming (802.11r/k/v)? [y/N]: " enable_roaming
    if [ "$enable_roaming" = "y" ] || [ "$enable_roaming" = "Y" ]; then
        enable_usteer="1"
        read -p "Mobility domain [4f57]: " mobility_domain
        mobility_domain=${mobility_domain:-4f57}
    fi
fi
echo ""

echo "--- WAN Connection Type ---"
echo "1) DHCP (default)"
echo "2) PPPoE"
echo "3) DS-Lite"
echo "4) MAP-E"
echo "5) Access Point Mode"
read -p "Select [1-5]: " wan_type
wan_type=${wan_type:-1}

case "$wan_type" in
    2)
        echo "--- PPPoE Settings ---"
        read -p "PPPoE username: " pppoe_username
        read -s -p "PPPoE password: " pppoe_password
        echo ""
        ;;
    3)
        echo "--- DS-Lite Settings ---"
        read -p "AFTR address: " dslite_aftr_address
        ;;
    4)
        echo "--- MAP-E Settings ---"
        read -p "BR address: " mape_br
        read -p "EA length: " mape_ealen
        read -p "IPv4 prefix: " mape_ipv4_prefix
        read -p "IPv4 prefix length: " mape_ipv4_prefixlen
        read -p "IPv6 prefix: " mape_ipv6_prefix
        read -p "IPv6 prefix length: " mape_ipv6_prefixlen
        read -p "PSID offset: " mape_psid_offset
        read -p "PSID length: " mape_psidlen
        read -p "GUA prefix (optional): " mape_gua_prefix
        ;;
    5)
        echo "--- Access Point Mode ---"
        read -p "AP IP address: " ap_ip_address
        read -p "Gateway address: " ap_gateway
        ;;
esac
echo ""

echo "--- Optional Services ---"
read -p "Enable ttyd (web terminal)? [y/N]: " enable_ttyd_input
[ "$enable_ttyd_input" = "y" ] || [ "$enable_ttyd_input" = "Y" ] && enable_ttyd="1"

read -p "Enable irqbalance? [y/N]: " enable_irqbalance_input
[ "$enable_irqbalance_input" = "y" ] || [ "$enable_irqbalance_input" = "Y" ] && enable_irqbalance="1"

read -p "Enable Samba4? [y/N]: " enable_samba4_input
[ "$enable_samba4_input" = "y" ] || [ "$enable_samba4_input" = "Y" ] && enable_samba4="1"

read -p "Enable network optimization? [y/N]: " enable_netopt_input
[ "$enable_netopt_input" = "y" ] || [ "$enable_netopt_input" = "Y" ] && enable_netopt="1"

read -p "Enable dnsmasq cache optimization? [y/N]: " enable_dnsmasq_input
[ "$enable_dnsmasq_input" = "y" ] || [ "$enable_dnsmasq_input" = "Y" ] && enable_dnsmasq="1"

read -p "Enable USB RNDIS? [y/N]: " enable_usb_rndis_input
[ "$enable_usb_rndis_input" = "y" ] || [ "$enable_usb_rndis_input" = "Y" ] && enable_usb_rndis="1"
echo ""

read -p "Backup configuration after setup? (path) (optional): " backup_path
echo ""

# ==============================
# 変数のエクスポート
# ==============================

export device_name
export root_password
export lan_ip_address
export lan_ipv6_address
export language
export timezone
export zonename
export ssh_interface
export ssh_port
export flow_offloading_type
export wlan_ssid
export wlan_password
export country
export enable_usteer
export mobility_domain
export pppoe_username
export pppoe_password
export dslite_aftr_address
export mape_br
export mape_ealen
export mape_ipv4_prefix
export mape_ipv4_prefixlen
export mape_ipv6_prefix
export mape_ipv6_prefixlen
export mape_psid_offset
export mape_psidlen
export mape_gua_prefix
export ap_ip_address
export ap_gateway
export enable_ttyd
export enable_irqbalance
export enable_samba4
export enable_netopt
export enable_dnsmasq
export enable_usb_rndis
export backup_path
export enable_notes="1"
export enable_ntp="1"
export enable_log="1"
export enable_diag="1"

# ==============================
# setup.sh のダウンロードと実行
# ==============================

echo "Downloading setup.sh..."
if ! wget --no-check-certificate -O "$SETUP_PATH" "$SETUP_URL" 2>/dev/null; then
    echo "Error: Failed to download setup.sh"
    exit 1
fi

chmod +x "$SETUP_PATH"

echo "Running setup.sh..."
sh "$SETUP_PATH"

# 実行後の確認
if [ $? -eq 0 ]; then
    echo ""
    echo "================================"
    echo "Setup completed successfully!"
    echo "================================"
    echo ""
    read -p "Reboot now? [y/N]: " reboot_now
    if [ "$reboot_now" = "y" ] || [ "$reboot_now" = "Y" ]; then
        reboot
    else
        echo "Please reboot manually to apply changes."
    fi
else
    echo "Error: Setup failed. Check /tmp/setup.log for details."
    exit 1
fi
